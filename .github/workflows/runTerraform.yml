name: 'Run Terraform'

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
    - main

env:
# https://www.terraform.io/docs/cli/config/environment-variables.html#tf_in_automation
  TF_IN_AUTOMATION : true
# https://www.terraform.io/docs/cli/config/environment-variables.html#tf_input  
  TF_INPUT : 0
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  terraformBackendPrefix: "default"
  apply: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}


jobs:
  terraform:
    name: 'Terraform on Pull Request'
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Read environment variables
      run: |
           git fetch origin environments
           git show remotes/origin/environments:default.env > default.env
    - name: Set environments variables
      uses: c-py/action-dotenv-to-setenv@v2
      with:
        env-file: default.env
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "${{ env.terraformVersion }}"
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      working-directory: "${{ env.workingDirectory }}"
      continue-on-error: true
     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, version.
    - name: Terraform init
      id: init
      run: terraform init -backend-config="bucket=${{ env.bucketName }}" -backend-config="prefix=${{ env.terraformBackendPrefix }}"
      working-directory: "${{ env.workingDirectory }}"
    - name: Terraform plan
      id: plan
      run: terraform plan -no-color
      working-directory: "${{ env.workingDirectory }}"
      continue-on-error: true
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    - name: Terraform apply
      if: env.apply == 'true'
      run: terraform apply -auto-approve
      working-directory: "${{ env.workingDirectory }}"